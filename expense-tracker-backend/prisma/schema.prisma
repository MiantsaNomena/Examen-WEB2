// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  accounts     Account[]
  categories   Category[]
  transactions Transaction[]

  @@map("users")
}

model Account {
  id      Int   @id @default(autoincrement())
  name    String
  type    String @default("courant") // courant, epargne, etc.
  balance Float  @default(0)
  userId  Int    @map("user_id")

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("accounts")
}

model Category {
  id     Int    @id @default(autoincrement())
  name   String
  type   String @default("expense") // expense, income
  userId Int    @map("user_id")

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@unique([name, userId])
  @@map("categories")
}

model Transaction {
  id           Int      @id @default(autoincrement())
  amount       Float    // Using Float instead of Decimal for SQLite compatibility
  type         String   // expense, income
  description  String?
  date         DateTime
  receiptPath  String?  @map("receipt_path")
  expenseType  String?  @default("one-time") @map("expense_type") // one-time, recurring
  startDate    DateTime? @map("start_date") // For recurring expenses
  endDate      DateTime? @map("end_date")   // For recurring expenses
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Foreign Keys
  userId     Int  @map("user_id")
  categoryId Int? @map("category_id")
  accountId  Int? @map("account_id")

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  account  Account?  @relation(fields: [accountId], references: [id], onDelete: SetNull)

  @@map("transactions")
}
